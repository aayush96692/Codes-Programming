Given an unsorted integer array nums, find the smallest missing positive integer.

Follow up: Could you implement an algorithm that runs in O(n) time and uses constant extra space.?

 

Example 1:

Input: nums = [1,2,0]
Output: 3
Example 2:

Input: nums = [3,4,-1,1]
Output: 2
Example 3:

Input: nums = [7,8,9,11,12]
Output: 1
 

Constraints:

0 <= nums.length <= 300
-231 <= nums[i] <= 231 - 1

Solution:

#Python Code
def firstMissingPositive(nums):
    n=len(nums)
    i=0
    while i<n:
        num=nums[i]-1
        while 1<=nums[i]<=n and nums[i]!=nums[num]:
            nums[i],nums[num]=nums[num],nums[i]
            num=nums[i]-1
        i+=1
    for i in range(n):
        if i+1!=nums[i]:
            return i+1
    return n+1
    
nums = [3,4,-1,1]
print(firstMissingPositive(nums))
